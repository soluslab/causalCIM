library("pcalg")
install.packages("pcalg")
library("pcalg")
library("pcalg")
1+1
#Load libraries
library("pcalg")
library("Rgraphviz")
#Generating a random DAG using the function randomDAG
p<-10 #number of nodes
myDAG<-randomDAG(n=p,prob=0.2,lB=0.1,uB=1)
plot(D1)
#Generating a linear Gaussian DAG model from a given random DAG
n<-10000 #number of samples
dat<-rmvDAG(n,myDAG,errDist="normal")
#Generating the sufficient statistic for the data sample from the Gaussian DAG
mySuffStat <- list(C = cor(dat), n = nrow(dat))
View(mySuffStat)
mySuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(mySuffStat, indepTest = gaussCItest, p=3, alpha = 0.01)
plot(pc.fit)
plot(D1)
plot(myDAG)
plot(myDAG)
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(mySuffStat, indepTest = gaussCItest, p=10, alpha = 0.01)
plot(pc.fit)
plot(pc.fit)
suffStats.name <- function(n) {
n*n
}
suffStats(3)
suffStats.name(3)
suffStats <- function(n) {
n*n
}
suffStats(3)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(n,N,p,prob,lB,uB) {
for(i in 1:N)
{
cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"))
}
}
suffStats(3)
suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(n,N,p,prob,lB,uB) {
for(i in 1:N)
{
print(cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")))
}
}
suffStats(1000,3,5,0.2,0.1,1)
setwd("~/Dropbox/Research/alg-stat/graphical-models/simulations")
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(n,N,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
for(i in 1:N)
{
cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"))
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
empty <- list()
empty
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(n,N,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
append(c,list( C = cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"), n = n)
}
}
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(n,N,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
append(c,list( C = cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"), n = n)))
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
append(c,list( C = cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"), n = n)))
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
append(c,list( C = cor(rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal"), n = m)))
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
append(c,list( C = cor(dat), n = nrow(dat)))
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
append(c,list( C = cor(dat), n = nrow(dat)))
return(c)
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
c  = append(c,list( C = cor(dat), n = nrow(dat)))
return(c)
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
length(testDataSet)
c = list(1,2,3)
for(i in 4:10) {
c = append(c,i)
}
c
c = list(1,2,3)
c = append(c,1)
c = list(1,2,3)
for(i in 4:10) {
c = append(c,1)
}
c
print(testDataSet)
for(i in 4:10) {
print i
}
for(i in 4:10) {
print(i)
}
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
c  = append(c,list(C = cor(dat), n = nrow(dat)))
return(c)
}
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
c  = append(c,list(C = cor(dat), n = nrow(dat)))
return(c)
}
}
testDataSet <- suffStats(1000,1,5,0.2,0.1,1)
print(testDataSet)
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
print(testDataSet)
testDataSet
#Building a function for producing a file containing sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
c = list()
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
c  = append(c,list(C = cor(dat), n = nrow(dat)))
}
return(c)
}
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
testDataSet
write.csv(testDataSet,'test-dataset.csv')
#Accessing the dataset from the csv file.
data(testDataSet)
#Accessing the dataset from the csv file.
read.csv(testDataSet.csv)
#Accessing the dataset from the csv file.
read.csv(test-dataset.csv)
#Accessing the dataset from the csv file.
read.csv("test-dataset.csv")
#Accessing the dataset from the csv file.
ImportedData <- read.csv("test-dataset.csv")
ImportedData
ImportedData[1]
r(1,2,3)
c(1,2,3)
rbind(c(1,2,3),c(4,5,6))
cbind(c(1,2,3),c(4,5,6))
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM <- rbind(c(C = cor(dat), n = nrow(dat)))
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM  = rbind(c,c(C = cor(dat), n = nrow(dat)))
}
return(DM)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
dat <- rmvDAG(n = 1000,randomDAG(3,0.2,0.1,1),errDist="normal")
DM <- c(C = cor(dat), n = nrow(dat))
DM
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM <- c(C = cor(dat), n = nrow(dat))
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM  = rbind(c,c(C = cor(dat), n = nrow(dat)))
}
return(DM)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM <- c(C = cor(dat), n = nrow(dat))
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM  = rbind(DM,c(C = cor(dat), n = nrow(dat)))
}
return(DM)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Viewing the dataset.
testDataSet
testDataSet[1]
testDataSet[2]
testDataSet[3]
testDataSet[4]
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM <- list(C = cor(dat), n = nrow(dat))
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
DM  = rbind(DM,list(C = cor(dat), n = nrow(dat)))
}
return(DM)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Viewing the dataset.
testDataSet
testDataSet[4]
testDataSet[3]
testDataSet[2]
testDataSet[1]
data(GmG)
data(gmG)
DATA <-data(gmG)
DATA[1]
DATA[2]
DATA[3]
DATA
DATA <-data("gmG")
DATA
library("pcalg")
DATA <-data("gmG")
DATA
gmG
testDataSet[1]
testDataSet[1:]
testDataSet
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
SuffStatArray <- matrix(list(C = cor(dat), n = nrow(dat)), nrow = 1)
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
SuffStatArray <- rbind(SuffStatArray,matrix(list(C = cor(dat), n = nrow(dat)),nrow = 1))
}
return(DM)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Viewing the dataset.
testDataSet
#Building a function for producing a dataset sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
SuffStatArray <- matrix(list(C = cor(dat), n = nrow(dat)), nrow = 1)
for(i in 2:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
SuffStatArray <- rbind(SuffStatArray,matrix(list(C = cor(dat), n = nrow(dat)),nrow = 1))
}
return(SuffStatArray)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
testDataSet <- suffStats(1000,3,5,0.2,0.1,1)
#Viewing the dataset.
testDataSet
testDataSet[1,]
testDataSet[2,]
testDataSet[3,]
testDataSet[,1]
testDataSet[,2]
#Writing the dataset to a file.
write.csv(testDataSet,'test-dataset-2.csv')
#Accessing the dataset from the csv file.
ImportedData <- read.csv("test-dataset-2.csv")
#Writing the dataset to a file.
write.csv(testDataSet,'test-dataset-2.txt')
#Accessing the dataset from the csv file.
ImportedData <- read.csv("test-dataset-2.txt")
#Set the working directory to where we would like to store the sufficient statistics for each simulated model.
setwd("~/Dropbox/Research/alg-stat/graphical-models/simulations/sufficient-statistics")
#Building a function for producing a directory of csv files containing the sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
write.csv(C = cor(dat),paste0('model-',i,'.csv'))
}
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
suffStats(1000,3,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing the sufficient statistics for many RMV DAG models.
suffStats <- function(m,N,p,prob,lB,uB) #m is the sample size, N is the number of models, p is the number of nodes
{
for(i in 1:N)
{
dat <- rmvDAG(n,randomDAG(p,prob,lB,uB),errDist="normal")
write.csv(cor(dat),paste0('model-',i,'.csv'))
}
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
suffStats(1000,3,5,0.2,0.1,1)
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
suffStats(1000,3,5,0.2,0.1,1)
#Creating a list in R of the sufficient statistics in the created directory.
list.files(path = ".")
#Creating a list in R of the sufficient statistics in the created directory.
L<-list.files(path = ".")
L
L[1]#Writing the dataset to a file.
#Creating a list in R of the sufficient statistics in the created directory.
L<-read.files(path = ".")
#Creating a list in R of the sufficient statistics in the created directory.
L<-read.csv(path = ".")
#Creating a list in R of the sufficient statistics in the created directory.
L<-list.files(path = ".")
#Creating a list in R of the sufficient statistics in the created directory.
L<-lapply(list.files(path = "."),read.csv())
#Creating a list in R of the sufficient statistics in the created directory.
L<-list.files(path = ".")
L
read.csv(L[1]))
read.csv(L[1])
lapply(list.files(path = "."),read.csv)
L <- lapply(list.files(path = "."),read.csv)
L[1]
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),read.csv),append()
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),read.csv)
for(F in L){append(F,nrow(F))}
L
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),read.csv)
L
L[1]
L[1,1]
nrow(L[1])
read.csd("model-1.csv")
read.csv("model-1.csv")
as.matrix(read.csv("model-1.csv"))
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),read.csv)
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),as.matrix(read.csv))
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(list.files(path = "."),read.csv),as.matrix)
L
data(gmG)
suffStatData <- list(C = cor(gmG$x), n = nrow(gmG$x))
suffStatData
L
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(lapply(list.files(path = "."),read.csv),as.matrix),-c(1))
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(lapply(list.files(path = "."),read.csv),as.matrix),[-c(1)])
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(list.files(path = "."),read.csv),as.matrix)
L
ncol(L[1])
L[1]
L[1,]
L[,1]
M <- read.csv("model-1.csv")
M
ncol(M)
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(list.files(path = "."),read.csv(row.names=F)),as.matrix)
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(list.files(path = "."),read.csv(file,row.names=F)),as.matrix)
M<- apply(list.files(path="."),read.csv,row.names=F)
M<- lapply(list.files(path="."),read.csv,row.names=F)
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(list.files(path = "."),read.csv)
for(F in L){F <- F[-c(1)]}
L
L[1]
ncol(L[1])
#Creating a list in R of the sufficient statistics in the created directory.
L <- lapply(lapply(list.files(path = "."),read.csv),as.matrix)
for(F in L){F <- F[-c(1)]}
ncol(L[1])
M <- read.csv("model-1.csv")
ncol(M)
M<- M[-c(1)]
ncol(M)
M
#Creating a list in R of the sufficient statistics in the created directory.
L <-apply(list.files(path = "."),read.csv)
#Creating a list in R of the sufficient statistics in the created directory.
L <-list.files(path = ".")
for(F in L){F <- csv.read(F)[-c(1)]}
#Creating a list in R of the sufficient statistics in the created directory.
L <-list.files(path = ".")
for(F in L){F <- (csv.read(F))[-c(1)]}
L
csv.read(L[1])
#Creating a list in R of the sufficient statistics in the created directory.
L <-list.files(path = ".")
for(F in L){F <- (read.csv(F))[-c(1)]}
L
#Creating a list in R of the sufficient statistics in the created directory.
L <-list.files(path = ".")
S<-()
S<-list()
for(F in L){append(S,list((read.csv(F))[-c(1)],n = ncol((read.csv(F))[-c(1)])))}
S
for(F in L){S<-append(S,list((read.csv(F))[-c(1)],n = ncol((read.csv(F))[-c(1)])))}
S
S[1]
S[1,]
S[,1]
S[2]
