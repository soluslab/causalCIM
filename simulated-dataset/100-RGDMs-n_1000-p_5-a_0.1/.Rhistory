#Load libraries
library("pcalg")
#Some notes
1+1
library("Rgraphviz")
#Some notes
1+1
#Generating a random DAG using function randomDAG
myDAG<-randomDAG(n=20,prob=0.2,lB=0.1,uB=1)
plot(myDAG)
#Generating a random DAG using function randomDAG
D1<-randomDAG(n=20,prob=0.2,lB=0.1,uB=1)
plot(D1)
plot(D1)
plot(D1)
D2<-randomDAG(n=20,prob=0.2,lB=0.1,uB=1)
plot(D2)
plot(D1)
plot.new(D2)
D3<-randomDAG(n=4,prob=0.2,lB=0.1,uB=1)
plot(D3)
D3<-randomDAG(n=4,prob=0.2,lB=0.1,uB=1)
plot(D3)
D3<-randomDAG(n=4,prob=0.2,lB=0.1,uB=1)
plot(D3)
D3<-randomDAG(n=4,prob=0.2,lB=0.1,uB=1)
plot(D3)
D3<-randomDAG(n=4,prob=0.2,lB=0.1,uB=1)
plot(D3)
D3<-randomDAG(n=4,prob=0.4,lB=0.1,uB=1)
plot(D3)
plot(D3, main = "random DAG on p=4 variables")
plot(D3, main = "random DAG on p=4 variables")
d.normMat<-rmvDAG(n,D3,errDist = "normal")
n <- 1000
d.normMat<-rmvDAG(n,D3,errDist = "normal")
d.normMat
suffStat <- list(C = cor(d.normMat$x),m=nrow(d.normMat$x))
suffStat <- list(C = cor(d.normMat),m=nrow(d.normMat))
suffStat
pc.fit <- pc(suffStat,indepTest = gaussCItest,p=ncol(d.normMat),alpha=0.01)
data(gmG)
suffStatData <- list(C = cor(gmG$x), n = nrow(gmG$x))
pc.fit <- pc(suffStat, indepTest = gaussCItest, p = ncol(gmG$x),alpha=0.01)
pc.fit <- pc(suffStatData, indepTest = gaussCItest, p = ncol(gmG$x),alpha=0.01)
par(mfrow = c(1, 2))
plot(gmG$g, main = "")
plot(gmG$g, main = "")
plot(pc.fit, main = "")
plot(pc.fit, main = "")
ncol(d.normMat)
suffStat
suffStatData
suffStat <- list(C = cor(d.normMat$x),m=nrow(d.normMat))
suffStat <- list(C = cor((d.normMat)$x),m=nrow(d.normMat))
gmG
ncol(gmG$x)
nrow(gmG$x)
nrow(d.normMat)
cor(d.normMat)
cor(gmG$x)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=ncol(d.normMat),alpha=0.01)
pc.fit <- pc(suffStatData, indepTest = gaussCItest, p = ncol(gmG$x),alpha=0.01)
pc.fit <- pc(suffStat, indepTest = gaussCItest, p = ncol(d.normMat),alpha=0.01)
suffStat
suffStatData
cor(gmG$x)
gmG$x
d.normMat
c(3:14)
M<-matrix(d.normMat,n,4,byrow=TRUE)
MsuffStat <- list(C = cor((d.normMat)$x),m=nrow(d.normMat))
M
suffStat <- list(C = cor(M),m=nrow(M))
suffStat
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=ncol(d.normMat),alpha=0.01)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,4,alpha=0.01)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=4,alpha=0.01)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=5,alpha=0.01)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=3,alpha=0.01)
suffStat
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=4,alpha=0.001)
pc.fit2 <- pc(suffStat,indepTest = gaussCItest,p=4,alpha=0.1)
gaussCItest(2,3,1,suffStat)
gaussCItest(2,3,1,suffStatData)
plot(D1)
D2<-randomDAG(n=5,prob=0.2,lB=0.1,uB=1)
plot(D2)
D2<-randomDAG(n=5,prob=0.3,lB=0.1,uB=1)
plot(D2)
dat<-rmvDAG(n,D2,errDist="normal")
M2<-matrix(dat,n,5,byrow=TRUE)
M2
suffStat2<-list(C2 = cor(M2), m2 = nrow(M2))
suffStat2
gaussCItest(1,4,2,suffStat2)
set.seed(29)
x <- rnorm(100)
y <- 3*x + rnorm(100)
z <- 2*y + rnorm(100)
dat <- cbind(x,y,z)
dat
suffStat3 <- list(C = cor(dat), n = nrow(dat))
suffStat3
gaussCItest(1,3,2,suffStat3)
D2<-randomDAG(n=3,prob=0.3,lB=0.1,uB=1)
plot(D2)
D2<-randomDAG(n=3,prob=0.3,lB=0.1,uB=1)
plot(D2)
D2<-randomDAG(n=3,prob=0.5,lB=0.1,uB=1)
plot(D2)
dat<-rmvDAG(1000,D2,errDist="normal")
M2<-matrix(dat,1000,5,byrow=TRUE)
M2
M2<-matrix(dat,1000,3,byrow=TRUE)
M2
dat<-rmvDAG(100,D2,errDist="normal")
M2<-matrix(dat,100,3,byrow=TRUE)
M2
suffStat2<-list(C2 = cor(M2), m2 = nrow(M2))
suffStat2
gaussCItest(1,2,NULL,suffStat2)
dat<-rmvDAG(n,D2)
suffStat <- list(C = cor(dat), n = n)
suffStat
suffStat2
pc.fit <- pc(suffStat, indepTest = gaussCItest, p=3, alpha = 0.01)
plot(pc.fit)
suffStatE <- list(C = cor(dat), n = nrow(dat))
suffStatE
suffStat
#Works
n <- 10000
dat<-rmvDAG(n,D2)
suffStat <- list(C = cor(dat), n = n)
suffStat
pc.fit <- pc(suffStat, indepTest = gaussCItest, p=3, alpha = 0.01)
plot(pc.fit)
suffStatE <- list(C = cor(dat), n = nrow(dat))
suffStatE
pc.fit <- pc(suffStat, indepTest = gaussCItest, p=3, alpha = 0.01)
dat<-rmvDAG(n,D2,errDist="normal")
suffStatE <- list(C = cor(dat), n = nrow(dat))
suffStatE
pc.fit <- pc(suffStat, indepTest = gaussCItest, p=3, alpha = 0.01)
View(pc.fit)
#Load libraries
library("pcalg")
library("Rgraphviz")
#Generating a random DAG using the function randomDAG
p<-10 #number of nodes
myDAG<-randomDAG(n=p,prob=0.2,lB=0.1,uB=1)
plot(myDAG)
#Generating a linear Gaussian DAG model from a given random DAG
n<-10000 #number of samples
dat<-rmvDAG(n,myDAG,errDist="normal")
#Generating the sufficient statistic for the data sample from the Gaussian DAG
mySuffStat <- list(C = cor(dat), n = nrow(dat))
mySuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(mySuffStat, indepTest = gaussCItest, p=10, alpha = 0.01)
plot(pc.fit)
#Set the working directory to where we would like to store the sufficient statistics for each simulated model.
setwd("~/Dropbox/Research/alg-stat/graphical-models/simulations/sufficient-statistics/100-RGDMs-n_1000-p_5-a_0.1")
#Generate a list of the true graphs.
trueGraphs <- function(N,p,prob,lB,uB)
{
trueGraphs <- list()
for(i in 1:N)
{
nam <- paste("trueGraph", i, sep = "")
trueGraphs <- append(trueGraphs,assign(nam,randomDAG(p,prob,lB,uB)))
}
return(trueGraphs)
}
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,G,errDist="normal")
write.csv(cor(dat),paste0('model-',i,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <- dataFileGenerator(3,10000,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,i,errDist="normal")
write.csv(cor(dat),paste0('model-',i,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <- dataFileGenerator(3,10000,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(cor(dat),paste0('model-',i,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <- dataFileGenerator(3,10000,5,0.2,0.1,1)
graphs
#Reading in a data file and creating its sufficient statistic.
produceSuffStat <- function(file)
{
dat <- (read.csv(file))[-c(1)]
return(list(C = cor(dat), n = nrow(dat)))
}
#Example
SuffStat <- produceSuffStat("model-1.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
plot(graphs[[1]])
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <- dataFileGenerator(3,10000,5,0.2,0.1,1)
graphs
#Reading in a data file and creating its sufficient statistic.
produceSuffStat <- function(file)
{
dat <- (read.csv(file))[-c(1)]
return(list(C = cor(dat), n = nrow(dat)))
}
#Example
SuffStat <- produceSuffStat("model-1.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
plot(graphs[[1]])
gmG
#Load libraries
library("pcalg")
library("Rgraphviz")
#Generating a random DAG using the function randomDAG
p<-10 #number of nodes
myDAG<-randomDAG(n=p,prob=0.2,lB=0.1,uB=1)
plot(myDAG)
#Generating a linear Gaussian DAG model from a given random DAG
n<-10000 #number of samples
dat<-rmvDAG(n,myDAG,errDist="normal")
#Generating the sufficient statistic for the data sample from the Gaussian DAG
mySuffStat <- list(C = cor(dat), n = nrow(dat))
mySuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(mySuffStat, indepTest = gaussCItest, p=10, alpha = 0.01)
plot(pc.fit)
plot(pc.fit)
#Set the working directory to where we would like to store the sufficient statistics for each simulated model.
setwd("~/Dropbox/Research/alg-stat/graphical-models/simulations/sufficient-statistics/100-RGDMs-n_1000-p_5-a_0.1")
#Generate a list of the true graphs.
trueGraphs <- function(N,p,prob,lB,uB)
{
trueGraphs <- list()
for(i in 1:N)
{
nam <- paste("trueGraph", i, sep = "")
trueGraphs <- append(trueGraphs,assign(nam,randomDAG(p,prob,lB,uB)))
}
return(trueGraphs)
}
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
}
write.table(TG,'true-graphs.txt')
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <- dataFileGenerator(3,10000,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
write_graph(TG[[i]],paste0('true-graph-',i,'txt'),"edge list")
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
dataFileGenerator(3,10000,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
write_graph(TG[[i]],paste0('true-graph-',i,'txt'),"edgelist")
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
dataFileGenerator(3,10000,5,0.2,0.1,1)
#Load libraries
library("pcalg")
library("Rgraphviz")
library("igraph")
#Generating a random DAG using the function randomDAG
p<-10 #number of nodes
myDAG<-randomDAG(n=p,prob=0.2,lB=0.1,uB=1)
plot(myDAG)
#Generating a linear Gaussian DAG model from a given random DAG
n<-10000 #number of samples
dat<-rmvDAG(n,myDAG,errDist="normal")
#Generating the sufficient statistic for the data sample from the Gaussian DAG
mySuffStat <- list(C = cor(dat), n = nrow(dat))
mySuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(mySuffStat, indepTest = gaussCItest, p=10, alpha = 0.01)
plot(pc.fit)
#Set the working directory to where we would like to store the sufficient statistics for each simulated model.
setwd("~/Dropbox/Research/alg-stat/graphical-models/simulations/sufficient-statistics/100-RGDMs-n_1000-p_5-a_0.1")
#Generate a list of the true graphs.
trueGraphs <- function(N,p,prob,lB,uB)
{
trueGraphs <- list()
for(i in 1:N)
{
nam <- paste("trueGraph", i, sep = "")
trueGraphs <- append(trueGraphs,assign(nam,randomDAG(p,prob,lB,uB)))
}
return(trueGraphs)
}
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
write_graph(TG[[i]],paste0('true-graph-',i,'txt'),"edgelist")
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
dataFileGenerator(3,10000,5,0.2,0.1,1)
TG
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <-dataFileGenerator(3,10000,5,0.2,0.1,1)
graphs
graphs[[1]]
as(graphs[[1]],"matrix")
graphs[[1]]
plot(graphs[[1]])
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'.csv'))
write.csv(as(TG[[i]],"matrix"),paste0('true-graph-',i,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 3 DAG models on 5 nodes with ER random graphs with edges with probability 0.2 and edgeweights between 0.1 and 1.
graphs <-dataFileGenerator(3,10000,5,0.2,0.1,1)
#Building a function for producing a directory of csv files containing samples from random Gaussian DAG models.
dataFileGenerator <- function(N,n,p,prob,lB,uB) #n is the sample size, N is the number of models, p is the number of nodes
{
TG <- trueGraphs(N,p,prob,lB,uB)
for(i in 1:length(TG))
{
dat <- rmvDAG(n,TG[[i]],errDist="normal")
write.csv(dat,paste0('model-',i,'-edge-prob-',prob,'.csv'))
write.csv(as(TG[[i]],"matrix"),paste0('true-graph-',i,'-edge-prob-',prob,'.csv'))
}
return(TG)
}
#Example for 1000 samples from 100  DAG models on 5 nodes with ER random graphs with edges with probability 0.3 and edgeweights between 0.1 and 1.
for(prob in 1:9)
#Example for 1000 samples from 100  DAG models on 5 nodes with ER random graphs with edges with probability 0.3 and edgeweights between 0.1 and 1.
for(prob in 1:9){
dataFileGenerator(10,1000,5,prob/10,0.1,1)
}
#Reading in a data file and creating its sufficient statistic.
produceSuffStat <- function(file)
{
dat <- (read.csv(file))[-c(1)]
return(list(C = cor(dat), n = nrow(dat)))
}
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.6.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.6.csv")
AdjMat
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.1.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.1.csv")
AdjMat
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.2.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.1.csv")
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.2.csv")
AdjMat
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.3.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.3.csv")
AdjMat
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.4.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.4.csv")
AdjMat
#Example
SuffStat <- produceSuffStat("model-1-edge-prob-0.5.csv")
SuffStat
#Running the PC algorithm on the sufficient statistic
pc.fit <- pc(SuffStat, indepTest = gaussCItest, p=5, alpha = 0.01)
plot(pc.fit)
#We compare the graph in file 'model-i.csv' to graph i in the list graphs of true graphs.
AdjMat <- read.csv("true-graph-1-edge-prob-0.5.csv")
AdjMat
